{
    "componentChunkName": "component---src-pages-index-tsx",
    "path": "/",
    "result": {"data":{"references":{"totalCount":4,"edges":[{"node":{"id":"56f1c293-391c-510c-b7d3-711c01fe660f","excerpt":"title second title third title item tag 1 tag 2","fields":{"slug":"/markdown/post/"},"frontmatter":{"author":"59","title":"test post","date":"02 04, 2022","category":"リファレンス"},"html":"<h1>title</h1>\n<h2>second title</h2>\n<h3>third title</h3>\n<ul>\n<li>item\n<ul>\n<li>tag 1</li>\n<li>tag 2</li>\n</ul>\n</li>\n</ul>"}},{"node":{"id":"5a40d825-cc90-5220-9271-d1e5acf53cbc","excerpt":"てすと","fields":{"slug":"/markdown/kawasaki/kawasaki/"},"frontmatter":{"author":"べ","title":"kawasaki","date":"02 04, 2022","category":"リファレンス"},"html":"<p>てすと</p>\n<div class=\"gatsby-code-title\">hoge.js</div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> kawasaki <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">kawasaki</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> kawasaki <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>"}},{"node":{"id":"98cbacf1-72da-5982-92bd-30ea7d403ec9","excerpt":"復習も兼ねて ◆create 　・インスタンスの作成 → 属性の代入 → データの保存を一貫して行える。 　・created_atとupdated_atも自動で入る。 　・多次元配列はforeach…","fields":{"slug":"/markdown/kawasaki/Laravel/20211213/"},"frontmatter":{"author":"川崎 尚弥","title":"【Laravel】createとinsertの違い","date":"12 13, 2021","category":"リファレンス"},"html":"<p>復習も兼ねて</p>\n<p>◆create<br>\n・インスタンスの作成 → 属性の代入 → データの保存を一貫して行える。<br>\n・created_atとupdated_atも自動で入る。</p>\n<p>　・多次元配列はforeachを使うなどをして分割してから処理する必要がある。</p>\n<p>◆insert<br>\n・SQLで直にインサートする。<br>\n・モデルインスタンスを通さないため、エスケープされないなどセキュリティ的に危険がある。</p>\n<p>　・created_atとupdated_atも手動で入れる必要がある。<br>\n・多次元配列をまとめて処理できる。<br>\n・ユーザーから入力される可能性がないseederファイルなどで有効。</p>\n<p>◆まとめ<br>\nユーザーからの入力値を扱う場合はcreate、seederなど固定データをまとめて処理する場合はinsertも有効。</p>"}}]},"parts":{"totalCount":13,"edges":[{"node":{"id":"cbdd09f2-8dc8-58cc-99ea-893d346b093c","excerpt":"フック本体 使い方","fields":{"slug":"/markdown/hayashi/React/hook-useAsync/"},"frontmatter":{"author":"林 裕大","title":"【React】useAsyncフック","date":"02 07, 2022","category":"パーツ"},"html":"<h1>フック本体</h1>\n<div class=\"gatsby-code-title\">useAsync.jsx</div>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> useAsync <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">D</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span> args<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">asyncFunc</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>  <span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">D</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    parameter<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    immediate<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">,</span>\n    initData<span class=\"token operator\">:</span> <span class=\"token constant\">D</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> asyncFunc<span class=\"token punctuation\">,</span> parameter<span class=\"token punctuation\">,</span> immediate<span class=\"token punctuation\">,</span> initData <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> args<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span> data<span class=\"token punctuation\">,</span> setData <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">useState</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">D</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span> initData <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span> loading<span class=\"token punctuation\">,</span> setLoading <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">useState</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">boolean</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span> immediate <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> self <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token generic-function\"><span class=\"token function\">useRef</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">boolean</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> execute <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>  <span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setLoading</span><span class=\"token punctuation\">(</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> <span class=\"token function\">asyncFunc</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">...</span>parameter <span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span> data <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">setLoading</span><span class=\"token punctuation\">(</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">setData</span><span class=\"token punctuation\">(</span> data <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span>\n            <span class=\"token function\">catch</span><span class=\"token punctuation\">(</span> e <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">setLoading</span><span class=\"token punctuation\">(</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">throw</span> e<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span> asyncFunc<span class=\"token punctuation\">,</span> parameter <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    React<span class=\"token punctuation\">.</span><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span>  <span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> immediate <span class=\"token punctuation\">)</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>  <span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            self<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span> immediate<span class=\"token punctuation\">,</span> execute <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        data<span class=\"token punctuation\">,</span>\n        loading<span class=\"token punctuation\">,</span>\n        execute<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h1>使い方</h1>"}},{"node":{"id":"3a79b56b-4775-5b25-bbf5-d326274f82c2","excerpt":"index.jsのmember2は通常の関数の初期化を使っているが、 こちらはthisと結び付けを行うため、member1の値を参照することができる。 対して、member3はアロー関数を使っていて、 this…","fields":{"slug":"/markdown/hayashi/JavaScript/this/"},"frontmatter":{"author":"林 裕大","title":"【JavaScript, ES6】アロー関数を使ったときのthisの中身","date":"01 12, 2022","category":"パーツ"},"html":"<p>index.jsのmember2は通常の関数の初期化を使っているが、<br>\nこちらはthisと結び付けを行うため、member1の値を参照することができる。<br>\n対して、member3はアロー関数を使っていて、<br>\nthisと結びつきが行われず、member1の値を参照することができない。</p>\n<div class=\"gatsby-code-title\">index.js</div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    member1<span class=\"token operator\">:</span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">member2</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>  <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>member1<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">member3</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>  <span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>member1<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>"}},{"node":{"id":"15aa70ff-30c6-5d26-88f8-93eeadf3b66c","excerpt":"多分実際のソースコードとは違いますが、option引数がない以外は再現できていると思います。 lodashの動きは楽しいので再現のしがいがあります。","fields":{"slug":"/markdown/hayashi/JavaScript/function-debounce/"},"frontmatter":{"author":"林 裕大","title":"【JavaScript, ES6】Lodashパッケージの_.debounce関数の中身","date":"12 23, 2021","category":"パーツ"},"html":"<p>多分実際のソースコードとは違いますが、option引数がない以外は再現できていると思います。<br>\nlodashの動きは楽しいので再現のしがいがあります。</p>\n<div class=\"gatsby-code-title\">debounce.js</div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">_debounce</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span> <span class=\"token parameter\">func<span class=\"token punctuation\">,</span> wait <span class=\"token operator\">=</span> <span class=\"token number\">0</span></span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> tID <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\"><span class=\"token operator\">...</span>args</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> tID <span class=\"token punctuation\">)</span> <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span> tID <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        tID <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span>  <span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">const</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">Reflect</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span> func<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> args <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> wait <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>"}}]},"bugs":{"totalCount":1,"edges":[{"node":{"id":"a6ea93f0-6dd5-5dc5-8713-cad413129ec4","excerpt":"aaa xxxxx","fields":{"slug":"/markdown/test3/"},"frontmatter":{"author":"べ","title":"JavaScript Syntax","date":"10 24, 2021","category":"バグ"},"html":"<p>aaa</p>\n<div class=\"gatsby-code-title\">hoge.js</div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> greeting <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> greeting <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>xxxxx</p>"}}]}},"pageContext":{}},
    "staticQueryHashes": ["1898098588","2059598792","2070179686","63159454"]}