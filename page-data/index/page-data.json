{
    "componentChunkName": "component---src-pages-index-tsx",
    "path": "/",
    "result": {"data":{"references":{"totalCount":2,"edges":[{"node":{"id":"0e3c8a2c-8832-5d4f-90f4-286034b59167","excerpt":"aaa","fields":{"slug":"/markdown/code/"},"frontmatter":{"title":"JavaScript Syntax","date":"10 24, 2021","category":"リファレンス"},"html":"<p>aaa</p>\n<div class=\"gatsby-code-title\">hoge.js</div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> greeting <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> greeting <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>"}},{"node":{"id":"df662c63-0fbd-5dcf-9985-2ebc9d4cfa8d","excerpt":"Use validation rule \"unique\" in resource controllers I learned this from 中日書房 case. Background The project use resource…","fields":{"slug":"/markdown/test2/"},"frontmatter":{"title":"JavaScript Syntax","date":"10 24, 2021","category":"リファレンス"},"html":"<h1>Use validation rule \"unique\" in resource controllers</h1>\n<p>I learned this from 中日書房 case.</p>\n<h2>Background</h2>\n<p>The project use resource route.<br>\nThere a role named salesman. When creating or editing a salesman, system will validate its email.<br>\nCreating page and editing page use same blade file.<br>\nAnd we want to use a request file to store rules so we need to divide the request we received is a creating or a editing.</p>\n<h2>Detail</h2>\n<p>Since we use resource controller, we can distinguish the request by its method: <font color=red>POST</font> and <font color=red>PUT</font>.</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Verb</th>\n<th align=\"left\">URI</th>\n<th align=\"left\">ACTION</th>\n<th align=\"left\">Route Name</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><font color=red>POST</font></td>\n<td align=\"left\">/photos</td>\n<td align=\"left\">store</td>\n<td align=\"left\">photos.store</td>\n</tr>\n<tr>\n<td align=\"left\"><font color=red>PUT/PATCH</font></td>\n<td align=\"left\">/photos/{photo}</td>\n<td align=\"left\">update</td>\n<td align=\"left\">photos.update</td>\n</tr>\n</tbody>\n</table>\n<p>So the if文 in Request file is:</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">rules</span><span class=\"token punctuation\">(</span><span class=\"token class-name type-declaration\">Request</span> <span class=\"token variable\">$request</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token operator\">-></span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string double-quoted-string\">\"PUT\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 営業編集</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 営業登録</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>When validating creating request data, we hope check the uniqueness of email address from data table \"salesmen\".<br>\nWhen validating editing request data, we hope check the uniqueness of email address <font color=red>execpt itself</font>.<br>\nSo we use \"unique\". Its defination is:</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\">unique<span class=\"token punctuation\">:</span>table<span class=\"token punctuation\">,</span>column<span class=\"token punctuation\">,</span>except<span class=\"token punctuation\">,</span>idColumn</code></pre></div>\n<ol>\n<li>First parameter is <b>table</b> name in database.</li>\n<li>Second parameter is column name in <b>table</b>.</li>\n<li>Third parameter is id value that you want to execpt (AKA the current salesman id).</li>\n<li>Fourth parameter is id column name in <b>table</b>.</li>\n</ol>\n<p>For example, this is the struture of \"salesmen\" <b>table</b>:</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>name</th>\n<th>email</th>\n<th>password</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>bigint(20)</td>\n<td>varchar(255)</td>\n<td>varchar(255)</td>\n<td>varchar(60)</td>\n</tr>\n</tbody>\n</table>\n<p>And the code will be:</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function-definition function\">rules</span><span class=\"token punctuation\">(</span><span class=\"token class-name type-declaration\">Request</span> <span class=\"token variable\">$request</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$request</span><span class=\"token operator\">-></span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string double-quoted-string\">\"PUT\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 営業編集</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token string single-quoted-string\">'email'</span> <span class=\"token operator\">=></span> <span class=\"token string single-quoted-string\">'unique:salesmen,email,'</span> <span class=\"token operator\">.</span><span class=\"token variable\">$this</span><span class=\"token operator\">-></span><span class=\"token function\">route</span><span class=\"token punctuation\">(</span><span class=\"token string single-quoted-string\">'salesman'</span><span class=\"token punctuation\">)</span><span class=\"token operator\">.</span> <span class=\"token string single-quoted-string\">',id'</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 営業登録</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token string single-quoted-string\">'email'</span> <span class=\"token operator\">=></span> <span class=\"token string single-quoted-string\">'unique:salesmen,email'</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Please notice this:<br>\n<b>$this->route('salesman')</b><br>\nWhen I was working on 中日書房 case, the \"id\" value was not included in $request.<br>\nSo I didn't know how to get it in an easy way. My colleague taught my this. It really is an artisan method.</p>\n<h2>reference:</h2>\n<p><a href=\"https://laravel.com/docs/8.x/validation#rule-unique\">https://laravel.com/docs/8.x/validation#rule-unique</a><br>\n<a href=\"https://laravel.com/docs/8.x/controllers#resource-controllers\">https://laravel.com/docs/8.x/controllers#resource-controllers</a></p>"}}]},"parts":{"totalCount":1,"edges":[{"node":{"id":"55a9e3d4-5099-50b0-9631-e7768bbc9684","excerpt":"","fields":{"slug":"/markdown/parts/reactjs/use_mounted_ref/"},"frontmatter":{"title":"useMountedRefフック","date":"11 05, 2021","category":"パーツ"},"html":"<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">\n<span class=\"token keyword\">export</span> <span class=\"token function-variable function\">useMountedRef</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>  <span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> mounted <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span>  <span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        mounted<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>  <span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span> mounted<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> mounted<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>"}}]},"bugs":{"totalCount":2,"edges":[{"node":{"id":"63d573ba-975c-5536-8c88-450fe4856f30","excerpt":"aaa","fields":{"slug":"/markdown/test/"},"frontmatter":{"title":"JavaScript Syntax","date":"10 24, 2021","category":"バグ"},"html":"<p>aaa</p>\n<div class=\"gatsby-code-title\">hoge.js</div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> greeting <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> greeting <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>"}},{"node":{"id":"a6ea93f0-6dd5-5dc5-8713-cad413129ec4","excerpt":"aaa xxxxx","fields":{"slug":"/markdown/test3/"},"frontmatter":{"title":"JavaScript Syntax","date":"10 24, 2021","category":"バグ"},"html":"<p>aaa</p>\n<div class=\"gatsby-code-title\">hoge.js</div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> greeting <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> greeting <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>xxxxx</p>"}}]}},"pageContext":{}},
    "staticQueryHashes": ["2059598792","3159585216","63159454"]}